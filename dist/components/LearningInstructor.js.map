{"version":3,"sources":["webpack:///./src/components/LearningInstructor/LearningInstructor.yaml","webpack:///./src/components/LearningInstructor/LearningInstructor.less","webpack:///./src/components/LearningInstructor/LearningInstructor.html?d853","webpack:///./src/components/LearningInstructor/LearningInstructor.less?2427","webpack:///./src/components/LearningInstructor/LearningInstructor.html","webpack:///./src/components/LearningInstructor/LearningInstructor.js","webpack:///./src/components/LearningInstructor/LearningInstructor.js?cdcd","webpack:///./src/components/LearningInstructor/LearningInstructor.less?cc26","webpack:///./src/components/LearningInstructor/LearningInstructor.vue","webpack:///./src/components/LearningInstructor/LearningInstructor.yaml?2482","webpack:///./src/components/LearningInstructor/LearningInstructorComputed.js","webpack:///./src/components/LearningInstructor/LearningInstructorMethods.js","webpack:///./src/components/LearningInstructor/LearningInstructorMethodsFeedback.js","webpack:///./src/components/LearningInstructor/LearningInstructorMethodsNavigation.js","webpack:///./src/components/LearningInstructor/LearningInstructorMethodsSentence.js","webpack:///./src/components/LearningInstructor/LearningInstructorMethodsToLearn.js","webpack:///./src/components/LearningInstructor/LearningInstructorMethodsWord.js","webpack:///./src/components/LearningInstructor/LearningInstructorMounted.js","webpack:///./src/components/LearningInstructor/LearningInstructorWatch.js","webpack:///./src/components/LearningInstructor/sound/censor-beep-01.mp3"],"names":[],"mappings":";;;;;;;;;AAAA;AACA;AACA,kCAAkC,MAAM,8BAA8B,UAAU,uBAAuB;AACvG;AACA;;;;;;;;;;;;ACJA;AACA,kCAAkC,mBAAO,CAAC,2GAAsD;AAChG;AACA;AACA,cAAc,QAAS,UAAU,mFAAmF;AACpH;AACA;;;;;;;;;;;;;ACNA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACPA;;AAEA;AACA,cAAc,mBAAO,CAAC,mhBAAsQ;AAC5R;AACA,4CAA4C,QAAS;AACrD;AACA;AACA,UAAU,mBAAO,CAAC,6HAAgE;AAClF,+CAA+C;AAC/C;AACA,GAAG,KAAU,EAAE,E;;;;;;;;;;;;ACXf;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAqB,mBAAO,CAAC,oEAAe;AAC5C;;AAEA;AACA;AACA,W;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,aAAa;AACb,gBAAgB;AAChB,gBAAgB;AAChB,aAAa;AACb;;AAEwE;AACxE,8EAA0B;;AAE4C;AACtE,6EAAyB;;AAEiE;AAC1F,uFAAmC;;AAEmD;AACtF,qFAAiC;;AAE6C;AAC9E,iFAA6B;;AAEuD;AACpF,oFAAgC;;AAEsD;AACtF,qFAAiC;;AAEqC;AACtE,6EAAyB;;AAEyC;AAClE,2EAAuB;;AAER,iF;;;;;;;;;;;;AC9Cf;AAAA;AAAA,wCAAqE,CAAgB,sJAAG,EAAC,C;;;;;;;;;;;;ACAzF;AAAA;AAAA;AAAA;;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA8G;AACzC;AACL;AACwC;;;AAGxG;AAC6F;AAC7F,gBAAgB,2GAAU;AAC1B,EAAE,uFAAM;AACR,EAAE,0GAAM;AACR,EAAE,mHAAe;AACjB;AACA;AACA;AACA;;AAEA;;AAEA;AACwP;AACxP,WAAW,0QAAM,iBAAiB,kRAAM;;AAExC;AACA,IAAI,KAAU,EAAE,YAiBf;AACD;AACe,gF;;;;;;;;;;;;AC3Cf;AAAA;AAAA;AAAA;AAAoT,CAAgB,0XAAG,EAAC,C;;;;;;;;;;;;ACAxU;AAAA;AAAA;AAA+B;;AAEhB;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA,wBAAwB,+CAAQ;AAChC;AACA;AACA;AACA,C;;;;;;;;;;;;ACtCA;AAAA;AAAA;AAAkD;;AAEnC;AACf;AACA,6CAA6C,gEAAS;AACtD;;AAEA;AACA;AACA;AACA,C;;;;;;;;;;;;;;ACTe;;AAEf;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,O;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,C;;;;;;;;;;;;AC9CA;AAAe;;AAEf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,C;;;;;;;;;;;;;;ACfe;;AAEf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;;AAEA;AACA;;AAEA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,O;AACA,KAAK;;AAEL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,C;;;;;;;;;;;;ACrMA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe;;AAEf;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,C;;;;;;;;;;;;ACvFA;AAAA;;AAEe;AACf;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA,KAAK;AACL;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;;AAEA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;;AAEA;;AAEA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;;AAEA;AACA;;AAEA,C;;;;;;;;;;;;AC3HA;AAAe;AACf;AACA;AACA;AACA,C;;;;;;;;;;;;ACJA;AAAe;AACf;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,C;;;;;;;;;;;ACZA,mD","file":"components/LearningInstructor.js","sourcesContent":["module.exports = function (Component) {\n  Component.options.__i18n = Component.options.__i18n || []\n  Component.options.__i18n.push('{\"en\":{\"TEST_MESSAGE\":\"Test Message\"},\"zh-TW\":{\"TEST_MESSAGE\":\"測試訊息\"}}')\n  delete Component.options._Ctor\n}\n","// Imports\nvar ___CSS_LOADER_API_IMPORT___ = require(\"../../../node_modules/css-loader/dist/runtime/api.js\");\nexports = ___CSS_LOADER_API_IMPORT___(true);\n// Module\nexports.push([module.id, \"\", \"\",{\"version\":3,\"sources\":[],\"names\":[],\"mappings\":\"\",\"file\":\"LearningInstructor.less\"}]);\n// Exports\nmodule.exports = exports;\n","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\"span\")\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../node_modules/css-loader/dist/cjs.js?sourceMap!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/less-loader/dist/cjs.js??ref--1-2!./LearningInstructor.less?vue&type=style&index=0&id=117601a2&lang=less&scoped=true&\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"54345dac\", content, false, {});\n// Hot Module Replacement\nif(module.hot) {\n // When the styles change, update the <style> tags\n if(!content.locals) {\n   module.hot.accept(\"!!../../../node_modules/css-loader/dist/cjs.js?sourceMap!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/less-loader/dist/cjs.js??ref--1-2!./LearningInstructor.less?vue&type=style&index=0&id=117601a2&lang=less&scoped=true&\", function() {\n     var newContent = require(\"!!../../../node_modules/css-loader/dist/cjs.js?sourceMap!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/less-loader/dist/cjs.js??ref--1-2!./LearningInstructor.less?vue&type=style&index=0&id=117601a2&lang=less&scoped=true&\");\n     if(newContent.__esModule) newContent = newContent.default;\n     if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n     update(newContent);\n   });\n }\n // When the module is disposed, remove the <style> tags\n module.hot.dispose(function() { update(); });\n}","export * from \"-!../../../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./LearningInstructor.html?vue&type=template&id=117601a2&scoped=true&\"","const MobileDetect = require('mobile-detect')\r\nconst md = new MobileDetect(window.navigator.userAgent)\r\n\r\nlet LearningInstructor = {\r\n  props: ['config', 'localConfig', 'utils'],\r\n  data () {    \r\n    this.$i18n.locale = this.localConfig.locale\r\n    return {\r\n      beep: null,\r\n      tryToStop: false,\r\n      md\r\n    }\r\n  },\r\n  //watch: {},  // LearningInstructorWatch.js\r\n  //computed: {}, // LearningInstructorComputed.js\r\n  //mounted() {}, // LearningInstructorMounted.js\r\n  methods: {} // LearningInstructorMethods.js\r\n}\r\n\r\nimport LearningInstructorComputed from './LearningInstructorComputed.js'\r\nLearningInstructorComputed(LearningInstructor)\r\n\r\nimport LearningInstructorMethods from './LearningInstructorMethods.js'\r\nLearningInstructorMethods(LearningInstructor)\r\n\r\nimport LearningInstructorMethodsNavigation from './LearningInstructorMethodsNavigation.js'\r\nLearningInstructorMethodsNavigation(LearningInstructor)\r\n\r\nimport LearningInstructorMethodsSentence from './LearningInstructorMethodsSentence.js'\r\nLearningInstructorMethodsSentence(LearningInstructor)\r\n\r\nimport LearningInstructorMethodsWord from './LearningInstructorMethodsWord.js'\r\nLearningInstructorMethodsWord(LearningInstructor)\r\n\r\nimport LearningInstructorMethodsToLearn from './LearningInstructorMethodsToLearn.js'\r\nLearningInstructorMethodsToLearn(LearningInstructor)\r\n\r\nimport LearningInstructorMethodsFeedback from './LearningInstructorMethodsFeedback.js'\r\nLearningInstructorMethodsFeedback(LearningInstructor)\r\n\r\nimport LearningInstructorMounted from './LearningInstructorMounted.js'\r\nLearningInstructorMounted(LearningInstructor)\r\n\r\nimport LearningInstructorWatch from './LearningInstructorWatch.js'\r\nLearningInstructorWatch(LearningInstructor)\r\n\r\nexport default LearningInstructor","import mod from \"-!./LearningInstructor.js?vue&type=script&lang=js&\"; export default mod; export * from \"-!./LearningInstructor.js?vue&type=script&lang=js&\"","export * from \"-!../../../node_modules/vue-style-loader/index.js!../../../node_modules/css-loader/dist/cjs.js?sourceMap!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/less-loader/dist/cjs.js??ref--1-2!./LearningInstructor.less?vue&type=style&index=0&id=117601a2&lang=less&scoped=true&\"","import { render, staticRenderFns } from \"./LearningInstructor.html?vue&type=template&id=117601a2&scoped=true&\"\nimport script from \"./LearningInstructor.js?vue&type=script&lang=js&\"\nexport * from \"./LearningInstructor.js?vue&type=script&lang=js&\"\nimport style0 from \"./LearningInstructor.less?vue&type=style&index=0&id=117601a2&lang=less&scoped=true&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"117601a2\",\n  null\n  \n)\n\n/* custom blocks */\nimport block0 from \"./LearningInstructor.yaml?vue&type=custom&index=0&blockType=i18n&issuerPath=E%3A%5Cpudding%5CCode-Porjects-Windows%5Cpwa%5CPWA-English-Speaking-Practice%5Csrc%5Ccomponents%5CLearningInstructor%5CLearningInstructor.vue&lang=yaml\"\nif (typeof block0 === 'function') block0(component)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"E:\\\\pudding\\\\Code-Porjects-Windows\\\\pwa\\\\PWA-English-Speaking-Practice\\\\node_modules\\\\vue-hot-reload-api\\\\dist\\\\index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('117601a2')) {\n      api.createRecord('117601a2', component.options)\n    } else {\n      api.reload('117601a2', component.options)\n    }\n    module.hot.accept(\"./LearningInstructor.html?vue&type=template&id=117601a2&scoped=true&\", function () {\n      api.rerender('117601a2', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"src/components/LearningInstructor/LearningInstructor.vue\"\nexport default component.exports","import mod from \"-!../../../node_modules/@kazupon/vue-i18n-loader/lib/index.js!./LearningInstructor.yaml?vue&type=custom&index=0&blockType=i18n&issuerPath=E%3A%5Cpudding%5CCode-Porjects-Windows%5Cpwa%5CPWA-English-Speaking-Practice%5Csrc%5Ccomponents%5CLearningInstructor%5CLearningInstructor.vue&lang=yaml\"; export default mod; export * from \"-!../../../node_modules/@kazupon/vue-i18n-loader/lib/index.js!./LearningInstructor.yaml?vue&type=custom&index=0&blockType=i18n&issuerPath=E%3A%5Cpudding%5CCode-Porjects-Windows%5Cpwa%5CPWA-English-Speaking-Practice%5Csrc%5Ccomponents%5CLearningInstructor%5CLearningInstructor.vue&lang=yaml\"","import Snowball from 'snowball'\r\n\r\nexport default function (LearningInstructor) {\r\n  LearningInstructor.computed = {\r\n    currentSentence () {\r\n      if (this.localConfig.playingIndex === null \r\n              || this.localConfig.playingIndex === undefined\r\n              || !this.config.sentenceList\r\n              || !this.config.sentenceList[this.config.playingIndex]) {\r\n        return ''\r\n      }\r\n      return this.config.sentenceList[this.localConfig.playingIndex]\r\n    },\r\n    \r\n    currentSentenceWords () {\r\n      return this.tokenizeSentenceToWords(this.currentSentence)\r\n    },\r\n    \r\n    previousSentence () {\r\n      //console.log(this.localConfig.playingIndex)\r\n      if (this.localConfig.playingIndex === 0) {\r\n        return ''\r\n      }\r\n      return this.config.sentenceList[(this.localConfig.playingIndex - 1)]\r\n    },\r\n    nextSentence () {\r\n      //console.log(this.localConfig.playingIndex)\r\n      if (this.localConfig.playingIndex === this.config.sentenceList.length - 1) {\r\n        return ''\r\n      }\r\n      return this.config.sentenceList[(this.localConfig.playingIndex + 1)]\r\n    },\r\n    \r\n    stemmer () {\r\n      let stemmer = new Snowball('English');\r\n      return stemmer\r\n    }\r\n  }\r\n}","import beepSound from './sound/censor-beep-01.mp3'\r\n\r\nexport default function (LearningInstructor) {\r\n  LearningInstructor.methods.initBeep = function () {\r\n    this.beep = this.utils.SoundUtils.create(beepSound)\r\n  }\r\n  \r\n  LearningInstructor.methods.tokenizeSentenceToWords = function (sentence) {\r\n    return sentence.split(' ')\r\n  }\r\n}","\r\nexport default function (LearningInstructor) {\r\n  \r\n  let feedbackWonderful = null\r\n  let feedbackGreat = null\r\n  let feedbackGood = null\r\n  let feedbackOK = null\r\n  \r\n  LearningInstructor.methods.speakPracticeFeedback = async function (score) {\r\n    \r\n    if (!feedbackWonderful) {\r\n      // https://www.soeasyedu.com.tw/blog/online-learning/2018/09/to-encourage-somebody\r\n      feedbackWonderful = this.utils.RandomUtils(['Wonderful!', 'Perfect!', 'Awesome!'])\r\n      feedbackGreat = this.utils.RandomUtils(['Great.', 'Good Job.', 'Well done.'])\r\n      feedbackGood = this.utils.RandomUtils(['Good.', 'Not bad.', 'Keep it up!'])\r\n      feedbackOK = this.utils.RandomUtils(['OK.', 'Try again?', 'Stay strong!'])\r\n    }\r\n    \r\n    //console.log(result)\r\n    //await this.utils.AsyncUtils.sleep(time)\r\n    await this.utils.AsyncUtils.sleep()\r\n    if (score === 1) {\r\n      let option = {\r\n        pitch: Math.ceil(Math.random() * 3)/10 + 1\r\n      } \r\n      await this.utils.TextToSpeechUtils.startSpeak(this.$t(feedbackWonderful.sampleUnduplicated()), option)\r\n    }\r\n    else if (score >= 0.7) {\r\n      let option = {\r\n        pitch: Math.ceil(Math.random() * 5)/10 + 0.8\r\n      }\r\n      await this.utils.TextToSpeechUtils.startSpeak(this.$t(feedbackGreat.sampleUnduplicated()), option)\r\n    }\r\n    else if (score >= 0.5) {\r\n      let option = {\r\n        pitch: Math.ceil(Math.random() * 4)/10 + 0.7\r\n      }\r\n      await this.utils.TextToSpeechUtils.startSpeak(this.$t(feedbackGood.sampleUnduplicated()), option)\r\n    }\r\n    else {\r\n      let option = {\r\n        pitch: Math.ceil(Math.random() * 5)/10 + 0.5\r\n      }\r\n      await this.utils.TextToSpeechUtils.startSpeak(this.$t(feedbackOK.sampleUnduplicated()), option)\r\n    }\r\n  }\r\n}","export default function (LearningInstructor) {\r\n\r\n  LearningInstructor.methods.goToPreviousSentence = function () {\r\n    if (this.localConfig.playingIndex > 0) {\r\n      this.localConfig.playingIndex--\r\n      return true\r\n    }\r\n    return false\r\n  }\r\n  LearningInstructor.methods.goToNextSentence = function () {\r\n    if (this.localConfig.playingIndex < this.config.sentenceList.length - 1) {\r\n      this.localConfig.playingIndex++\r\n      return true\r\n    }\r\n    return false\r\n  }\r\n}","\r\nexport default function (LearningInstructor) {\r\n\r\n  LearningInstructor.methods.speakCurrentSentence = async function () {\r\n    if (this.config.currentSentenceIsSpeaking === true) {\r\n      this.utils.TextToSpeechUtils.stopSpeak()\r\n      this.tryToStop = true\r\n      await this.utils.AsyncUtils.sleep(100)\r\n      this.config.currentSentenceIsSpeaking = false\r\n      this.tryToStop = false\r\n      this.config.firstSpeakHint = true\r\n      return false\r\n    }\r\n\r\n    this.config.currentSentenceIsSpeaking = true\r\n    let time = await this.utils.TextToSpeechUtils.startSpeak(this.currentSentence)\r\n    if (this.tryToStop === true) {\r\n      return false\r\n    }\r\n    this.config.currentSentenceIsSpeaking = false\r\n\r\n    if (this.localConfig.speakingInstructionStrategy !== 'none') {\r\n\r\n      if (this.config.firstSpeakHint) {\r\n        await this.utils.AsyncUtils.sleep()\r\n        if (this.localConfig.practiceMode === 'speaking') {\r\n          await this.utils.TextToSpeechUtils.startSpeak(this.$t(`Please repeat.`))\r\n        }\r\n        if (this.localConfig.practiceMode === 'writing') {\r\n          await this.utils.TextToSpeechUtils.startSpeak(this.$t(`Please transrcibe.`))\r\n        }\r\n        this.config.firstSpeakHint = false\r\n      }\r\n      \r\n      await this.practiceSentence(time)\r\n    }\r\n\r\n\r\n    if (this.localConfig.autoPlay === true) {\r\n      if (this.goToNextSentence()) {\r\n        await this.utils.AsyncUtils.sleep()\r\n        this.speakCurrentSentence()\r\n      }\r\n    }\r\n  }\r\n  \r\n  LearningInstructor.methods.practiceSentence = async function (time) {\r\n\r\n    if (this.localConfig.practiceMode === 'writing') {\r\n      this.config.practiceSentence = ''\r\n    }\r\n    else if (this.localConfig.practiceMode === 'speaking') {\r\n      this.config.practiceSentence = null\r\n    }\r\n    \r\n    this.config.practiceSentenceEvaluationResult = []\r\n    this.config.practiceSentenceEvaluationScore = null\r\n    this.config.currentSentenceMask = this.localConfig.practiceSentenceMask\r\n\r\n    // --------------------------\r\n    if (this.localConfig.practiceMode === 'speaking') {\r\n      await this.playBeep()\r\n      await this.practiceSentenceSpeaking()\r\n      await this.practiceSentenceSubmitSubmit()\r\n    }\r\n  }\r\n  \r\n  LearningInstructor.methods.playBeep = async function () {\r\n    \r\n    // --------------------------\r\n\r\n    if (!this.md.mobile()) {\r\n      await this.utils.AsyncUtils.sleep()\r\n      await this.beep.play()\r\n      await this.utils.AsyncUtils.sleep()\r\n    }\r\n  }\r\n  \r\n  LearningInstructor.methods.practiceSentenceSpeaking = async function (time) {\r\n    if (!time) {\r\n      time = this.currentSentence.length * 100\r\n      //console.log(time)\r\n    }\r\n    time = time + 1000\r\n\r\n//    if (debugPractice === false) {\r\n    let muteCancel = false\r\n    setTimeout(() => {\r\n      if (this.config.practiceSentence && this.config.practiceSentence !== '') {\r\n        return true\r\n      }\r\n      this.utils.SpeechToTextUtils.stopListen()\r\n      muteCancel = true\r\n    }, 5000)\r\n\r\n    // --------------------------\r\n\r\n    let hasReceivcePracticeSentence = false\r\n    let thresholdWordsCount = Math.round(this.currentSentenceWords.length / 2)\r\n\r\n    while (!hasReceivcePracticeSentence) {\r\n      this.config.practiceSentence = await this.utils.SpeechToTextUtils.startListen(this.currentSentence, (processing) => {\r\n        this.config.practiceSentence = processing\r\n      }, this.localConfig.debugSpeechToTextUtilsMockup)\r\n\r\n      if (muteCancel === true) {\r\n        return false\r\n      }\r\n\r\n      // 如果字數太短，那也要重新聽取\r\n      //if (this.config.practiceSentence.split(' ').length < )\r\n      let practiceWords = this.tokenizeSentenceToWords(this.config.practiceSentence)\r\n      if (practiceWords.length >= thresholdWordsCount) {\r\n        hasReceivcePracticeSentence = true\r\n        await this.utils.AsyncUtils.sleep()\r\n      } else {\r\n        await this.utils.AsyncUtils.sleep()\r\n        await this.utils.TextToSpeechUtils.startSpeak(this.$t(`Please speak again.`))\r\n        await this.utils.AsyncUtils.sleep()\r\n        this.beep.play()\r\n      }\r\n\r\n      if (muteCancel === true) {\r\n        return false\r\n      }\r\n    } // while (!hasReceivcePracticeSentence) {\r\n  }\r\n    \r\n  LearningInstructor.methods.practiceSentenceSubmit = async function () {\r\n    \r\n    this.config.currentSentenceMask = false\r\n    //this.config.practiceSentence = 'ok'\r\n\r\n    this.config.practiceSentenceEvaluationResult = this.evaluateSentencePractice(this.config.practiceSentence, this.currentSentence)\r\n    this.config.practiceSentenceEvaluationScore = LearningInstructor.methods.scoreSentenceEvaluate(this.config.practiceSentenceEvaluationResult)\r\n    //console.log(this.config.practiceSentenceEvaluationScore)\r\n    await this.speakPracticeFeedback(this.config.practiceSentenceEvaluationScore)\r\n    \r\n    await this.utils.AsyncUtils.sleep(2000)\r\n  }\r\n\r\n  LearningInstructor.methods.evaluateSentencePractice = function (source, target) {\r\n    source = this.utils.DictUtils.filterWord(source)\r\n    target = this.utils.DictUtils.filterWord(target)\r\n    \r\n    \r\n    let resultRaw = this.utils.DiffUtils.diffWords(source, target)\r\n    //console.log(resultRaw)\r\n    let result = []\r\n    \r\n    resultRaw.forEach(r => {\r\n      if (!r.added) {\r\n        result.push(r)\r\n      }\r\n      else {\r\n        let words = this.tokenizeSentenceToWords(r.value)\r\n        \r\n        words.forEach(w => {\r\n          this.recordWordsToLearn(w)\r\n          \r\n          result.push({\r\n            added: true,\r\n            removed: false,\r\n            value: w\r\n          })\r\n        })\r\n      }\r\n    })\r\n    \r\n    return result\r\n  }\r\n  \r\n  LearningInstructor.methods.scoreSentenceEvaluate = function (results) {\r\n    let error = 0\r\n    results.forEach(r => {\r\n      //console.log(r.added)\r\n      if (r.added === true) {\r\n        error++\r\n      } \r\n    })\r\n    \r\n    //console.log(error)\r\n    \r\n    if (error > 5) {\r\n      return 0\r\n    }\r\n    else if (error <= 5 && error > 2) {\r\n      return 0.5\r\n    }\r\n    else if (error >= 1 && error <= 2) {\r\n      return 0.7\r\n    }\r\n    else {\r\n      return 1\r\n    }\r\n  }\r\n  \r\n}","let stopwords = [\r\n  'a',\r\n  'the',\r\n  'to',\r\n  'in',\r\n  'are',\r\n  'there',\r\n  'at',\r\n  'on',\r\n  'as',\r\n  'for',\r\n  'from',\r\n  'dont',\r\n  'have',\r\n  'has',\r\n  'than',\r\n  'this',\r\n  'that',\r\n  'once',\r\n  'was',\r\n  'make',\r\n  'made',\r\n  'its',\r\n  'and',\r\n  'or',\r\n  'not'\r\n]\r\n\r\nexport default function (LearningInstructor) {\r\n  \r\n  LearningInstructor.methods.stem = function (word) {\r\n    this.stemmer.setCurrent(word)\r\n    this.stemmer.stem()\r\n    return this.stemmer.getCurrent()\r\n  }\r\n  \r\n  LearningInstructor.methods.generateKeyName = function (word) {\r\n    word = this.utils.DictUtils.filterWord(word)\r\n    return 'WordToLearn:' + this.stem(word)\r\n  }\r\n  \r\n  LearningInstructor.methods.recordWordsToLearn = function (word) {\r\n    word = this.utils.DictUtils.filterWord(word)\r\n    if (stopwords.indexOf(word) > -1) {\r\n      return false\r\n    }\r\n    \r\n    let value = this.getWordToLearnScore(word)\r\n    \r\n    value++\r\n    \r\n    if (word.length > 10) {\r\n      value++\r\n    }\r\n    \r\n    let key = this.generateKeyName(word)\r\n    localStorage.setItem(key, value)\r\n  }\r\n  \r\n  LearningInstructor.methods.reduceWordsToLearn = function (word) {\r\n    let value = this.getWordToLearnScore(word)\r\n    \r\n    value--\r\n        \r\n    let key = this.generateKeyName(word)\r\n    localStorage.setItem(key, value)\r\n  }\r\n  \r\n  LearningInstructor.methods.getWordToLearnScore = function (word) {\r\n    let key = this.generateKeyName(word)\r\n    \r\n    let value = localStorage.getItem(key)\r\n    if (!value) {\r\n      value = 0\r\n    }\r\n    else {\r\n      value = Number(value)\r\n    }\r\n    \r\n    return value\r\n  }\r\n  \r\n  LearningInstructor.methods.clearWordToLearn = function (word) {\r\n    let key = this.generateKeyName(word)\r\n    localStorage.removeItem(key)\r\n    //console.log('clear', this.getWordToLearnScore(word))\r\n  }\r\n}","/* global LearningInstructor */\r\n\r\nexport default function (LearningInstructor) {\r\n  LearningInstructor.methods.speakWord = async function (word) {\r\n    await this.utils.TextToSpeechUtils.startSpeak(word)\r\n  }\r\n\r\n  LearningInstructor.methods.practiceWord = async function (word) {\r\n\r\n    //console.log(word)\r\n\r\n    if (this.localConfig.practiceMode === 'writing') {\r\n      this.config.practiceWord = ''\r\n    } else if (this.localConfig.practiceMode === 'speaking') {\r\n      this.config.practiceWord = null\r\n    }\r\n\r\n    this.config.practiceWordScore = null\r\n\r\n    this.config.currentWordMask = this.localConfig.practiceSentenceMask\r\n\r\n    // --------------------------\r\n\r\n    if (this.localConfig.practiceMode === 'speaking') {\r\n      await this.playBeep()\r\n      await this.practiceWordSpeak(word)\r\n      await this.practiceWordSubmit(word)\r\n    }\r\n  }\r\n\r\n  LearningInstructor.methods.practiceWordSpeak = async function (word) {\r\n\r\n    let muteCancel = false\r\n    setTimeout(() => {\r\n      if (this.config.practiceWord && this.config.practiceWord !== '') {\r\n        return true\r\n      }\r\n      this.utils.SpeechToTextUtils.stopListen()\r\n      muteCancel = true\r\n    }, 3000)\r\n\r\n    let hasReceivcePracticeSentence = false\r\n    let thresholdWordsCount = 1\r\n\r\n    while (!hasReceivcePracticeSentence) {\r\n\r\n      this.config.practiceWord = await this.utils.SpeechToTextUtils.startListen(word, (processing) => {\r\n        this.config.practiceWord = processing\r\n      }, this.localConfig.debugSpeechToTextUtilsMockup)\r\n\r\n      if (!this.config.practiceWord) {\r\n        await this.utils.AsyncUtils.sleep()\r\n        continue\r\n      }\r\n\r\n      let practiceWords = this.tokenizeSentenceToWords(this.config.practiceWord)\r\n      if (practiceWords.length >= thresholdWordsCount) {\r\n        hasReceivcePracticeSentence = true\r\n        //await this.utils.AsyncUtils.sleep()\r\n      } else {\r\n        await this.utils.AsyncUtils.sleep()\r\n        await this.utils.TextToSpeechUtils.startSpeak(this.$t(`Please speak again.`))\r\n        await this.utils.AsyncUtils.sleep()\r\n        this.beep.play()\r\n      }\r\n\r\n      if (muteCancel === true) {\r\n        return false\r\n      }\r\n    } // while (!hasReceivcePracticeSentence) {\r\n  }\r\n\r\n  LearningInstructor.methods.practiceWordSubmit = async function (word) {\r\n\r\n    this.config.currentWordMask = false\r\n\r\n    //console.log(word)\r\n\r\n    this.config.practiceWordScore = this.evaluateWordPractice(this.config.practiceWord, word)\r\n    await this.speakPracticeFeedback(this.config.practiceWordScore)\r\n\r\n    //return false\r\n    if (this.config.practiceWordScore >= 0.7) {\r\n      //await this.utils.AsyncUtils.sleep()\r\n      this.clearWordToLearn(word)\r\n      this.config.currentWord = null\r\n    } else {\r\n      this.reduceWordsToLearn(word)\r\n    }\r\n  }\r\n\r\n  LearningInstructor.methods.evaluateWordPractice = function (source, target) {\r\n    let score = 1\r\n\r\n    source = this.utils.DictUtils.filterWord(source)\r\n    target = this.utils.DictUtils.filterWord(target)\r\n\r\n    let result = this.utils.DiffUtils.diffChars(source, target)\r\n    //console.log(result)\r\n    let addedCharCount = 0\r\n    result.forEach(r => {\r\n      if (r.added === true) {\r\n        addedCharCount = addedCharCount + r.count\r\n      }\r\n    })\r\n\r\n    //console.log(addedCharCount, target.length)\r\n\r\n    let percent = (target.length - addedCharCount) / target.length\r\n\r\n    if (percent >= 0.8) {\r\n      score = 1\r\n    } else if (percent >= 0.7) {\r\n      score = 0.7\r\n    } else if (percent >= 0.3) {\r\n      score = 0.5\r\n    } else {\r\n      score = 0\r\n    }\r\n\r\n    return score\r\n  }\r\n\r\n}","export default function (LearningInstructor) {\r\n  LearningInstructor.mounted = function () {\r\n    this.initBeep()\r\n  }\r\n}","export default function (LearningInstructor) {\r\n  LearningInstructor.watch = {\r\n    'localConfig.locale'() {\r\n      this.$i18n.locale = this.localConfig.locale;\r\n    },\r\n    'localConfig.playingIndex' () {\r\n      this.config.practiceSentence = null\r\n    },\r\n    'autoPlay.autoPlay' () {\r\n      this.config.firstSpeakHint = true\r\n    }\r\n  }\r\n}","module.exports = \"./dist/asset/censor-beep-01.mp3\";"],"sourceRoot":""}